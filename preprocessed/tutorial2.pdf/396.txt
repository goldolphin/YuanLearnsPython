【PG】372 Hello World!
message = random.choice(messages)    
prin t "\n " + message
start_time = da tetime.da tetime.now() 
typing = raw_inpu t('>')
end_ time = da tetime.da tetime.now()   
diff = end_ time - s tart_time
typing_ time = diff.seconds + diff.microseconds / floa t(1000000) 
cps = len(message) / typing_ time
wpm = cps * 60 / 5.0
prin t "\nYou typed %i charac ters in %.1f seconds." % (len(message),   
                              typing_ time)                             
prin t "Tha t's %.2f chars per sec, or %.1f words per minu te" %(cps, wpm)
if typing == message:
    prin t "You didn' t make any mis takes."
else:
    prin t "But, you made a t leas t one mis take."

【PG】There’s one more thing you should know about timedelta  objects. Unlike datetime  objects, which have year, month, day, hour, minute, second (and microseconds), a timedelta  object only has days, seconds, and microseconds. If you want the months or years, you have to cal - culate them from the number of days. If you want minutes or hours, you have to calculate them from the seconds.

【PG】Saving time to a file
As we mentioned at the start of the chapter, sometimes you need to save a time value to a file (on the hard disk) so it can be saved even when the program isn’t running. If you save the now()  time whenever a program finishes, you can check the time when the program starts again and print a message like this:

Of course, most programs don’t do that, but some programs need to know how long they have been idle, or not running. One example is a Virtual Pet program. Just like the virtual pet keychains that were popular a few years ago, you might want the program to keep track of time even when you’re not using it. So, for example, if you end the program and then come back to it two days later, your virtual pet should be very hungry! The only way for the program to know how hungry the pet should be is for it to know how much time has passed since the last time the virtual pet was fed. That includes the time the program was shut down.

There are a couple of ways you could save the time to a file. You could just write a string to the file, like this: It has been 2 days, 7 hours, 23 minu tes since you las t used this program.

【PG】timeFile.wri te ("2012-10-24 14:23:37" )Picks message from list
Starts clock
Stops clock Calculates elapsed time
For typing speed, 1 word = 5 characters
Displays results with print formatting
Download from Wow! eBook <www.wowebook.com>