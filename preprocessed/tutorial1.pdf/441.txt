【PG】附录 C　自测题答案　　 415

【PG】4. 合计零钱的函数应当如下所示：380 Hello World!
【PG】3No answer, just try it.
【PG】4The function to add up change should look like this:
【PG】The program that calls it would look like this:

【PG】Chapter 14: Objects
【PG】Test your knowledge
【PG】1To define a new object type, you use the class  keyword.
【PG】2Attributes are the “things you know” about an object. They are variables contained in an object.
【PG】3Methods are the “actions” you can do to an object. They are functions contained in an object.
【PG】4A class is just a definition or blueprint for an object. An instance is what you get when you make an object from the blueprint.
【PG】5The name self  is usually used as the instance reference in an object method.
【PG】6Polymorphism is the ability to have two or more methods with the same name on different objects. The methods can behave differently depending on which object they belong to.
【PG】7Inheritance is the ability for objects to acquire attributes and methods from their “parents.” The “child” class (which is called a subclass or derived class) gets all the attributes and methods of the parent and can also have attributes and methods that are not shared with the parent.

【PG】print country 
【PG】print 
【PG】#call the function and pass seven arguments to it 
【PG】printAddr("Sam", "45", "Main St.", "Ottawa", "ON", "K2M 2E9", "Canada")
【PG】printAddr("Jian", "64", "2nd Ave.", "Hong Kong", "", "235643", "China")

【PG】def addUpChange(quarters, dimes, nickels, pennies):
    total  = 0.25 * quarters + 0.10 * dimes + 0.05 * nickels + 0.01 * 
pennies
    return total
quarters = int(raw_input("quarters: "))
dimes = int(raw_input("dimes: "))
nickels = int(raw_input("nickels: "))
pennies = int(raw_input("pennies: "))
total  = addUpChange(quarters, dimes, nickels, pennies)
print "You have a total of: ", total

【PG】调用它的程序可能如下所示：
【PG】380 Hello World!
【PG】3No answer, just try it.
【PG】4The function to add up change should look like this:
【PG】The program that calls it would look like this:

【PG】Chapter 14: Objects
【PG】Test your knowledge
【PG】1To define a new object type, you use the class  keyword.
【PG】2Attributes are the “things you know” about an object. They are variables contained in an object.
【PG】3Methods are the “actions” you can do to an object. They are functions contained in an object.
【PG】4A class is just a definition or blueprint for an object. An instance is what you get when you make an object from the blueprint.
【PG】5The name self  is usually used as the instance reference in an object method.
【PG】6Polymorphism is the ability to have two or more methods with the same name on different objects. The methods can behave differently depending on which object they belong to.
【PG】7Inheritance is the ability for objects to acquire attributes and methods from their “parents.” The “child” class (which is called a subclass or derived class) gets all the attributes and methods of the parent and can also have attributes and methods that are not shared with the parent.

【PG】print country 
【PG】print 

【PG】#call the function and pass seven arguments to it 
【PG】printAddr("Sam", "45", "Main St.", "Ottawa", "ON", "K2M 2E9", "Canada")
【PG】printAddr("Jian", "64", "2nd Ave.", "Hong Kong", "", "235643", "China")

【PG】def addUpChange(quarters, dimes, nickels, pennies):
    total  = 0.25 * quarters + 0.10 * dimes + 0.05 * nickels + 0.01 * pennies
    return total
quarters = int(raw_input("quarters: "))
dimes = int(raw_input("dimes: "))
nickels = int(raw_input("nickels: "))
pennies = int(raw_input("pennies: "))
total  = addUpChange(quarters, dimes, nickels, pennies)
print "You have a total of: ", total

【PG】第14章
【PG】测试题
【PG】1. 要定义一个新的对象类型，需要使用 class关键字。
【PG】2. 属性是有关一个对象“你所知道的信息”，就是包含在对象中的变量。
【PG】3. 方法是可以对对象做的“动作”，就是包含在对象中的函数。
【PG】4. 类只是对象的定义或蓝图，从这个蓝图建立对象时得到的就是实例。
【PG】5. 在对象方法中通常用self作为实例引用。
【PG】6. 多态是指不同对象可以有同名的两个或多个方法。 这些方法可以根据它们所属的对象有不同的行为。
【PG】7. 继承是指对象能够从它们的“双亲”（父类）得到属性和方法。“子”类（也称为子类或派生类）会得到父类的所有属性和方法，还可以有父类所没有的属性和方法。

【PG】动手试一试
【PG】1. 对应银行账户的类如下所示：
【PG】381  Answers to Self-Test Questions

【PG】Try it out
【PG】1A class for a bank account might look like this:
【PG】And here’s some code to test it and make sure it is working:
【PG】2To make an interest account, make a subclass of BankAccount, and create a method to add interest:
【PG】Here’s some code to test it:
【PG】class BankAccount:
    def __init__(self, acct_number, acct_name):
        self.acct_number = acct_number
        self.acct_name = acct_name        
        self.balance = 0.0
    def displayBalance(self):
        print "The account balance is:", self.balance
    def deposit(self, amount):
        self.balance = self.balance + amount
        print "You deposited", amount
        print "The new balance is:", self.balance
    def withdraw(self, amount):
        if self.balance >= amount:            
            self.balance = self.balance - amount            
            print "You withdrew", amount
            print "The new balance is:", self.balance
        else:            
            print "You tried to withdraw", amount
            print "The account balance is:", self.balance
            print "Withdrawal denied.  Not enough funds."
myAccount = BankAccount(234567, "Warren Sande")
print "Account name:", myAccount.acct_name
print "Account number:", myAccount.acct_number
myAccount.displayBalance()
myAccount.deposit(34.52)
myAccount.withdraw(12.25)
myAccount.withdraw(30.18)
class InterestAccount(BankAccount):
    def addInterest(self, rate):
        interest = self.balance * rate        
        print "adding interest to the account,",rate * 100,"percent"
        self.deposit (interest)
myAccount = InterestAccount(234567, "Warren Sande")
print "Account name:", myAccount.acct_name
print "Account number