【PG】第 20章 更多 GUI

【PG】20.2 让 GUI做点事情

【PG】现在有了一个非常基本的 GUI，这个窗口中包含一个按钮。不过它什么也做不了。我们还没有编写代码来告诉程序当有人点击按钮时要做些什么。这就像有一辆汽车，虽然有车身和四个轮子，但是没有发动机。尽管看起来不错，可是哪里也去不了。

【PG】我们需要一些代码让程序运行起来。对于 PyQt 程序来说，起码要有下面这些代码：

【PG】代码清单 20-1 PyQt 程序所需的最少代码

【PG】import sys
from PyQt4 import QtCore, QtGui, uic  
form_class = uic.loadUiType("MyFirstGui.ui")[0] 
class MyWindowClass(QtGui.QMainWindow, form_class):                
    def __init__(self, parent=None):            
        QtGui.QMainWindow.__init__(self, parent)                
        self.setupUi(self)                      
app = QtGui.QApplication(sys.argv)  
myWindow = MyWindowClass() 
myWindow.show()                
app.exec_()

【PG】导入所需的 PyQt库
【PG】加载在 Designer 中创建的 UI
【PG】为主窗口定义一个类
【PG】返回事件循环的 PyQt对象
【PG】创建一个窗口类的实例启动程序，显示 GUI窗口

【PG】如果你想知道在第 315 章结尾处的 [0] 的作用，右侧是关于它的解释。由 Python 可以想见，PyQt 中的一切都是对象。每个窗口都是对象，要用 class 关键字定义。在这个程序以及所有我们要用 PyQt编 写的所有程序中， 都有一个类继承自 PyQt的 QMainWindow 类。在代码清单 20-1 中，我们调用了 MyWindowClass 类（第6行），但其实这个类可以用任意名字。需要记住的是，类的定义只是一个蓝本，我们仍然需要根据蓝本去把程序写出来。

【PG】行结尾处的 [0]，是因为 uic.loadUiType()方法返回的是一个列表，其中包含两个东西：一个是 form_class，另一个是 base_class。我们只需要第一个，即 form_class，也就是列表中的 item[0]。 

【PG】第 23章 Take a Chance—Randomness

【PG】This would do exactly the same thing as the previous example. The choice() function randomly chooses an item from a list. In this case, the list is the numbers from 1/uni00A0to/uni00A06.

【PG】More than one die

【PG】What if you want to simulate rolling two dice? If you’re just going to add up the two dice to get the total, you might think of doing it this way:

【PG】After all, the total of two dice can be from 2 to 12, right? Well, yes and no. You will get a random number between 2 and 12, but not in the same way as adding up two random numbers from 1 to 6. What that code line does is like rolling one big 11-sided die, not two 6-sided dice. But what’s the difference? That gets into a topic called probability. The easiest way to see the difference is to try it out and see.

【PG】Let’s roll the dice many times and keep track of how many times each total comes up. We’ll do that with a loop and a list. The loop will roll the dice, and the list will keep track of how many times each total comes up. Let’s start with the single 11-sided die, as shown in listing 23.1.

【PG】import random
totals = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  
for i in range(1000):
    dice_total = random.randint(2, 12)
    totals[dice_total] += 1  
    
for i in range (2, 13):    print "total", i, "came up", totals[i], "times"

【PG】The list has indexes from 0 to 12, but we won’t use the first two, because we don’t care about totals 0 or 1—they’ll never happen B. When we get a result, we add 1 to that list item C. If the total is 7, we add one to totals[7]. So totals[2] is the number of 2s we got, totals[3] is the number of 3s we got, and so on.

【PG】If you run this code, you should get something like this:

【PG】Listing 23.1 Rolling a single 11-sided die 1,000 times

【PG】two_dice = random.randint(2, 12)

【PG】List has 13 items, with index 0 to 12 B

【PG】Adds 1 to the count of this total C

【PG】total 2 came up 95 times

【PG】total 3 came up 81 times

【PG】total 4 came up 85 times

【PG】total 5 came up 86 times

【PG】total 6 came up 100 times

【PG】total 7 came up 85 times

【PG】total 8 came up 94 times

【PG】total 9 came up 98 times

【PG】total 10 came up 93 times

【PG】total 11 came up 84 times

【PG】total 12 came up 99 times

【PG】图灵社区会员 FreeLink 专享 尊重版权