【PG】21.5　格式化的新方法　　 291
【PG】>>> my_string = '%.2f' % 12.3456
【PG】>>> print my_string
【PG】12.35
【PG】>>> print 'The answer is', my_string

这里没有直接打印格式化数字， 我们把它赋给变量 my_string 。再将my_string与其他一些文本结合，并打印整个句子。

对于 GUI和 其他图形程序（ 如游戏）来说，将格式化数字存储为字符串非常有用。一旦有一个对应格式化字符串的变量名， 就 可以采用你希望的任何方式来显示：可以显示在文本框中，显示在对话框中，或者显示在游戏屏幕上。

【PG】21.5　格式化的新方法

刚刚学习的格式化字符串的语法在 Python的所有版本中都可以正常工作。 但是在 Python 2.6 及 之后的版本中， 有一个新的格式化方法。 因为这本书中使用的是Python 2.7， 所以我想我们也应该看一下这个新方法。 你可能会在 Python代码中见到它，所以这样你起码会知道它是什么意思。 你可以自行决定使用新的还是旧的语法来格式化字符串。

【PG】format() 方法

（在Python 2.6 及之后的版本中 ）Python 字符串有一个名为 format() 的方法。它的工作方式和你在前面见过的 %格式化字符串很像。事实上， 格式化说明符号 f、g、e等都是一样的，只不过使用方式稍有区别。最好用例子来说明。

下面是旧的方法：
print 'I got %.1f in math, %.1f in science ' % (math, science)

下面是新的方法：
print 'I got {0:.1f} in math, {1:.1f} in science '.format(math, science)

在这种新方法中， 格式化说明符被放在花括号中， 而不再以 %开头。0和1告诉Python要格式化的是元组中的哪个变量。Python 计数从 0开始，所以元组中第一个元素（变量 math）的索引是 0，第二个元素（变量 science）的索引是 1。然后使用.1f，其用法和旧方法中一样。

这就是新方法的全部内容。你可以像旧方法中用 %格式化一样，将格式化后的字符串存为一个变量：