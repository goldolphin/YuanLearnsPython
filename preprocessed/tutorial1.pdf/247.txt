【PG】17.3　统计时间　　 221的函数检查帧速率。 当然，如果将帧速率设置为 30，它就总会以 30 fps的帧速率运
行（假设你的计算机能够运行那么快 ） 。要看一个特定程序在特定机器上运行的最快
速度，可 以先将 clock.tick 设置得非常快（ 例如 200 fps） ， 然后运行这个程序， 用
clock.get_fps() 检查实际的帧速率。 （接下来就会给出一个这样的例子。）

【PG】调整帧速率
如果想要确保你的动画在每个机器上都以相同的速度运行， 可以利用 clock.
tick()和clock.get_fps() 实现一个小技巧。 因为你知道要以多快的速度运行，
而且也知道实际运行的速度，因此可以根据机器的速度调整（scale）动画的速度。
例如，假 设已经设置了 clock.tick(30) ，这说明你想按 30 fps的帧速率运行。
如果使用 clock.get_fps() 并发现只得到速率为 20 fps，可以知道： 屏幕上对象移
动的速度比你希望的要慢。 因 为每秒的帧数更少， 所以每一帧必须把对象移动得更
远，这样看上去才跟得上预想的速度。 你 的移动对象可能有一个名为 speed的变量
（或属性） ，这会告诉它们每一帧移动多远。 只 需要增加 speed对运行速度较慢的机
器做出补偿。
要增加多少呢 ？可 以按期望帧频率与实际帧速率的比值来增加。 如果对象的当
前速度是 10，期望的帧速率是 30 fps ，程序实际运行速率为 20 fps，可以得到：

【PG】object_speed = current_speed * (desired fps / actual fps)
object_speed = 10 * (30 / 20)
object_speed = 15

【PG】所以并不是每帧要将对象移动 10个像素， 而是需要移动 15个像素， 才能弥补
较慢的帧速率。我们将在本书后面的一些程序中使用这个技巧。

【PG】下面的沙滩球程序使用了前面几节讨论的内容 ：Clock和get_fps() 。

【PG】代码清单 17-4　沙滩球程序中使用 Clock 和get_fps()
import sys, pygame                                                     
from random import *                                      
class MyBallClass(pygame.sprite.Sprite):                               
    def __init__(self, image_file, location, speed):                  
        pygame.sprite.Sprite.__init__(self)                          
        self.image = pygame.image.load(image_file)                    
        self.rect = self.image.get_rect()                             
        self.rect.left, self.rect.top = location                     
        self.speed = speed                                          
    def move(self):                                                   
        self.rect = self.rect.move(self.speed)                        
        if self.rect.left < 0 or self.rect.right > width:             
            self.speed[0] = -self.speed[0]                            
        if self.rect.top < 0 or self.rect.bottom > height:            
            self.speed[1] = -self.speed[1]                        Ball类定义