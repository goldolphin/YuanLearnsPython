【PG】22.7　写文件　　 311
【PG】代码清单 22-4　对一个新文件使用写模式302 Hello World!

When we were reading files, we said you should close the file when you’re done. But it’s even more important to use close()  when you’re done writing . That’s because the changes don’t actually get saved to the file until you close()  it.

After you run the program in listing 22.3, open notes.txt  using Notepad (or any other text editor) and see what’s in it. Remember to close Notepad when you’re done.

Writing to a file

Now let’s try an example of writing to a file using the write mode. We’ll open a file that isn’t on the hard drive. Type in the program in listing 22.4 and run it.

new_file = open("my_new_notes.txt", 'w')
new_file.write("Eat supper\n")
new_file.write("Play soccer\n")
new_file.write("Go to bed")
new_file.close()

How do you know it worked? Check in the folder where you saved the program from listing 22.4. You should see a file there called my_new_notes.txt . 
You can open this file in Notepad to see what’s in it. You should see this:

You created a text file with this program and stored some text in it. This text is on the hard drive, and it’ll stay there forever—or at least as long as the hard drive keeps working—unless you delete it. So we have a way to permanently store data from our programs. Now your programs can leave a permanent mark on the world (or at least on your hard drive). Anything you need to keep when the program stops and the computer is shut off, you can put in a file. 

Let’s see what happens if we use write mode on a file that’s already on the hard drive. Remember our file called notes.txt? If you ran the program in listing 22.3, it looks like this:

Let’s open this file in write mode and write to it, to see what happens. Listing 22.5 has the code.

the_file = open('notes.txt', 'w')
the_file.write("Wake up\n")
the_file.write("Watch cartoons")
the_file.close()

Listing 22.4 Using write mode on a new file
Listing 22.5 Using write mode on an existing file

Eat supper
Play soccer
Go to bed
Wash the car
Make my bed
Collect allowance
Spend allowance

【PG】运行这个代码， 然后在“ 记事本”中打开 notes.txt， 看看其中包含什么内容。 应该会看到：

I’m a baby dill!
I’m a big pickle!
And I’m a really big pickle!
We’re being pickled so we can be used later!

Run this code, and then open notes.txt in Notepad to see what it contains. You should see this: The stuff that was in notes.txt  before is gone. It has been replaced by the new stuff from the program in listing 22.5. 

Writing to a file using print

In the last section, we wrote to a file using write(). You can also use print to write to a file. You still have to open the file in write or append mode, but then you can write to the file using print, like this:

The two > symbols (which are sometimes called chevrons) are telling print to send its output to a file instead of to the screen. This is called redirecting output.

Sometimes it’s more convenient to use print than write(), because print does things like automatically converting numbers to strings, and so on. You can decide whether to use print or write() to put text into a file.

Saving your stuff in files: pickle

In the first part of this chapter, we talked about reading and writing text files. Text files are one way you can store things to the hard drive. But what if you want to store something like a list or an object? Sometimes the items in the list might be strings, but not always. And what about storing things like objects? You might be able to convert all the object’s properties to strings and write them to a text file, but then you’d have to do the opposite to go from the file back to an object. It could get complicated.

Luckily, Python has a way to make storing things like lists and objects easier. It’s a Python module called pickle. That’s kind of a funny name, but think about it: pickling is a way of preserving food so you can use it later. In Python, you “pickle” your data so you can save it on disk and use it later. Makes sense!