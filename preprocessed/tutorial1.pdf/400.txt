【PG】第 25章　Skier 游戏的说明

【PG】def update(self):
        global speed
        self.rect.centery -= speed[1]
变量speed是滑雪者的速度， 它是一个全局变量， 包含了 x和y方向的速度，
所以我们使用索引 [1]来获取 y （垂直）方向的速度。

【PG】和创建的第一屏障碍物一样 ，我 们还需要在窗口下方创建另外一屏的障碍物。
那怎么知道应该在什么时候创建呢？ 我 们可以创建一个名为 map_position 的变量，
由它来告诉我们场景已经向上滚动了多少。我们在主循环中像下面这样处理。

【PG】running = True
while running:
    clock.tick(30)
    for event in pygame.event.get():        if event.type == pygame.QUIT: running = False
        
    map_position += speed[1]          
    
    if map_position >= 640:                           
        create_map()                                        
        map_position = 0       记录地图已经往上
滚动了多少
如果整屏已经滚动完，创建一个
新的含障碍物的场景

【PG】我们用animate() 函数来重绘屏幕， 就像在只有滑雪者的代码中那样。 合在一
起，只有障碍物的代码看起来像下面这样。

【PG】代码清单 25-2　创建 Skier 游戏 —只有障碍物
import pygame, sys, rando m
        
class ObstacleClass(pygame.sprite.Sprite):                           
    def __init__(self, image_file, location, type):                  
        pygame.sprite.Sprite.__init__(self)                          
        self.image_file = image_file                                 
        self.image = pygame.image.load(image_file)                   
        self.rect = self.image.get_rect()                            
        self.rect.center = location                                          self.type = type                                             
        self.passed = False                                          
                                                                     
    def update(self):                                                
        global speed                                                
        self.rect.centery -= speed[1]       
        def create_map():                                                    
    global obstacles                                                
    locations = []                                                  
    for i in range(10):            
        row = random.randin t                   ) 9  , 0 (
        col = random.randint(0, 9)        location  = [col * 64 + 32, row * 64 + 32 + 640 ]
        if not (location in locations):           
            locations.append(location)          
            type = random.choice(["tree", "flag"] )
            if type == "tree": img = "skier_tree.png"            elif type == "flag":  img = "skier_flag.png"            obstacle = ObstacleClass(img, location, type )
            obstacles.add(obstacle)
def animate():                                                 
    screen.fill([255, 255, 255])                              
    obstacles.draw(screen)                                   
             ) ( p i l f . y a l p s i d . e m a g y p     
pygame.init()                                                
screen = pygame.display.set_mode([640,640])                 
clock = pygame.time.Clock()                                 
speed = [0, 6]                                               
obstacles = pygame.sprite.Group()                      
map_position = 0                                         
create_map()                                
running = True                                                  
while running:                                                  
    clock.tick(30)                                                  for event in pygame.event.get():                            
        if event.type == pygame.QUIT: running = False          

【PG】障碍物的类（树和小旗）

【PG】创建一个有障碍物的场景：640 Ｘ640 每屏 10个障碍物

【PG】图灵社区会员 FreeLink 专享 尊重版权