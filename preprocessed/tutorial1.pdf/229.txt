【PG】16.9　让球反弹　　 203

【PG】代码清单 16-13　流畅地移动沙滩球图像

import pygame, sys
pygame.init( )
screen = pygame.display.set_mode([640,480] )
screen.fill([255, 255, 255])
my_ball = pygame.image.load('beach_ball.png')
x = 50       
y = 50                
screen.blit(my_ball,[x, y])                                      
pygame.display.flip()

for looper in range (1, 100):    
    pygame.time.delay(20)                                        
    pygame.draw.rect(screen, [255,255,255], [x, y, 90, 90], 0)   
    x = x + 5                    
    screen.blit(my_ball, [x, y])                                 
    pygame.display.flip()    

running = True
while running:
    for event in pygame.event.get():        
        if event.type == pygame.QUIT: 
            running = False

pygame.quit( )

增加这几行代码
开始一个 for循环使用 x和y（而 
不是数字）
把time.delay 值从 2000
改变为 20
让球一直移动

【PG】在前面的程序中， 球一直移动到窗口右边， 然后停下来。 现在我们来让球一直移动下去。
如果只是增加 x会发生什么 ？随着x值的增加 ，沙滩球会一直右移 。不过我们的窗口 （显示表面 ）在x = 640 时就到头了 。所以球会消失 。试着把代码清单16-13第10行中的for循环改为 ：for looper in range (1, 200):
现在循环运行次数是原先的两倍， 球会从边界消失！ 如果希望继续看到球， 有两个选择。

让球从窗口边界反弹。
让球重新翻转到窗口的另一边。

【PG】下面来看如何实现这两种做法。

【PG】16.9　让球反弹

如果想让球看起来会在窗口的边界反弹 ，就要知道它什么时候 “碰到”窗口边界 ，然后让它朝反方向移动 。如果想让球一直来回移动 ，就要在窗口左右两边都做同样的处理 。在左边界 ，这 很容易， 因为我们只需要检查球的位置是不是等于 0（或者某个很小的数） 。