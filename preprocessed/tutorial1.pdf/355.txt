【PG】23.3　创建一副牌　　 329

牌，我们使用 random.choice() 函数随机地从这个列表中选牌 。每选出一张牌 ，可以使用remove() 把它从列表 （这副牌）中删除。

【PG】洗牌

在一个真正的纸牌游戏中，我们要洗牌，也就是说要把纸牌杂乱地混在一起，让它们有一种随机的顺序。这样一来，我们可以只取最上面的一张牌，这张牌是随机的。不过利用random.choice()函数，总能从列表中随机选择。我们不必取“最上面”的牌，所以“洗牌”没有意义。这就像把牌摊开，说“选一张牌，随便哪张都行”。“在一个纸牌游戏中，如果每个人都这么做，这会很耗费时间，不过在计算机程序中这非常容易。”

【PG】纸牌对象

我们要使用一个列表作为“一副牌”。不过这些牌本身怎么表示？如何存储每张牌呢？是存储为字符串还是整数？我们需要知道每张牌的哪些方面？在纸牌游戏中，我们通常需要知道一张牌的3个方面。

花色—方块、红桃、梅花或黑桃。

点数—A、2、3，…10、J、Q、K。

分值—用数字编号的牌（2到10），通常分值就等于牌的点数。对于J、Q和K，分值通常是10，A的分值可能是1、11或者另外某个值，这要依具体游戏而定。

所以我们要跟踪这3个方面，而且需要用某种容器把它们汇集在一起。利用列表可以做到，不过我们还必须记住每一项分别是什么。另一种办法是建立一个包含右面属性的“牌”：

那么我们要这么做。我们还会增加另外两个属性suit_id和rank_id。

【PG】下面就采用这种做法。我们还会增加另外两个属性suit_id和rank_id。

suit_id—表示花色，是一个从1到4的数，其中1=方块，2=红桃，3=梅花，4=黑桃。

点数 分值 点数 分值

A 1或11 8 8
2 2 9 9
3 3 10 10
4 4 J 10
5 5 Q 10
6 6 K 10
7 7

我们还要增加另外两个属性short_name和long_name。当程序需要打印出牌时，它会想要打印出“4H”或者“4 of Hearts”。对于花色牌，它会像“JD”或者“Jack of Diamonds”这样。我们会增加short_name和long_name属性，这样程序可以轻松地打印出短或者长的牌面描述。

让我们为一张纸牌创建一个类吧。代码如下所示：