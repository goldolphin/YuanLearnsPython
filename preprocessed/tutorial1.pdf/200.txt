【PG】174 第 15章 模块
能时就不必再从头开始了。
并不是所有模块都要使用。 模块化意味着你可以使用各部分的不同组合来完成不同的任务，就像利用同样的一组乐高积木可以搭建不同的东西一样。

【PG】15.3 积木桶
在关于函数的第 13章中，我们说过函数就像积木，那么模块可以认为是一桶积木。根据需要，你可以从一个桶中取很多或者很少的积木，也可以有很多桶不同的积木。也许有一桶正方形积木，一桶长方形积木，还有一桶奇形怪状的积木。程序员通常也采用这种方法来使用模块，也就是说，他们会把类似的函数收集在一个模块中。或者他们也有可能把一个项目需要的所有函数收集在一个模块中，就像你会把搭城堡需要的所有积木都放在一个桶中一样。

【PG】15.4 如何创建模块
下面来创建模块。模块就是一个 Python 文件，类似代码清单 15-1 中给出的文件。在一个 IDLE 编辑器窗口中键入代码清单 15-1 中的代码，把它保存为 my_module.py。
代码清单 15-1 创建一个模块
# this is the file "my_module.py"
# we're going to use it in another program
def c_to_f(celsius):
    fahrenheit = celsius * 9.0 / 5 + 32
    return fahrenheit
就这么简单！这样就创建了一个模块！模块中只有一个函数，也就是c_to_f()函数，它会把温度从摄氏度转换为华氏度。接下来我们在另一个程序中使用 my_module.py。

【PG】15.5 如何使用模块
要使用模块中的某个函数，首先必须告诉 Python 我们想要使用哪些模块。在程序中，可以通过import语句实现。例如，使用my_module.py中的c_to_f()函数，可以这样写：

import my_module
print(my_module.c_to_f(30))

这段代码首先使用import语句将my_module.py模块导入到程序中，然后调用c_to_f()函数并输出结果。