【PG】17.3　统计时间　　 219
【PG】00:00:00:12像素完美碰撞检测更逼真。 （ 在真正的沙滩球周围你不会觉得有任何隐形的矩
形，对吧？）但是在程序中实现时就没这么简单了。
对于要在 Pygame中 完成的大多数工作来说， 矩形碰撞检测已经足够了。 像素
完美碰撞检测需要写更多代码， 而 且会让游戏运行得更慢， 所以应该只有在确实有
必要的情况下才使用这种方法。 完 成像素完美碰撞检测有几个模块（ 我上次查看时，
Pygame网站上至少有两个 ） 。如果想尝试进行像素完美碰撞检测， 只 需在网上搜索
一下就会找到这些模块。

【PG】17.3　统计时间
到目前为止， 我们一直在使用 time.delay() 来控制动画运行的快慢。 不过这
不是最好的办法， 这 是因为，
使用time.delay() 时，你并
不真正知道每个循环需要多
长时间。 循 环中的代码要花
一些时间来运行（ 这 是一个
未知时间 ） ，然后延迟也要花
费一些时间（ 这 是一个已知
时间） 。所以这个时间中有一部分是已知的 ，但有一部分是未知的。
如果我们想知道循环多长时间运行一次 ，就 需要知道每个循环的总时间， 这应
当是代码运行时间 +延迟时间。 要 计算动画的时间， 使用毫秒或千分之一秒会很方
便。它的缩写是 ms ，所以 25毫秒就是 25 ms。
在我们的例子中 ，假 设代码时间是 15 ms。这说明，while循环中的代码运行需
要15 ms，这 不包括time.delay() 。我们已经知道延迟时间， 因为这里使用 time.
delay(20) 把延迟设置为 20 ms。所以循环的总时间是 20 ms + 15 ms = 35 ms。由于
1秒就是 1000 ms，如果每个循环需要 35 ms，可以得到 1000 ms / 35 ms = 28.57。这
说明每秒大约有 29个 循环。在计算机图形学中， 每个动画步叫做一帧， 游戏程序员
讨论图形更新的快慢时都会提到帧速率（ 每 秒帧数，fps） 。 在我们的例子中， 帧速率
大约是 29 fps。
问
题在于，我 们并不能真正控制这个公式中的“ 代码时间 ”部分。如果增加或
删除代码， 这 个时间就会改变。 即使是相同的代码， 如果动画精灵个数不同（ 例如，
随着游戏对象的出现和消失， 动 画精灵个数会变化 ） ，绘制这些精灵所花费的时间也
会改变。