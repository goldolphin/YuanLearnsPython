【PG】23.2　掷骰子　　 323
预测，我们称之为随机。抛硬币就是随机事件的一个例子。
如果抛硬币的次数很多， 可能会发现正面朝上次数和背
面朝上次数基本相同。 不 过这一点永远也不能保证。 如果抛 4
次，可能会得到 2次正面 2次背面； 但 是也可能得到 3次正
面1次背面， 或 者1次正面 3次背面， 或者甚至连续 4次正
面（或4次背面） 。如果抛 100次 ，可能得到 50次正面。 但是也可能得到 20、44、
67或者甚至 100次全都是正面 ！全都是正面的可能性不大，但是确实有可能发生。
这里的关键是每次事件都是随机的 。尽 管大量抛硬币可能会存在某种规律， 但
是每一次抛硬币正面朝上或背面朝上的可能性都是一样的。 换 种说法， 也就是说硬
币没有记忆。 所 以即使你刚刚连续抛出了 99次正面， 你可能认为不太可能连续得到
100个正面，但下一次抛出仍有 50%的可能会得到正面 。这就是随机的含义。
随机事件就是可能有两个或多个结果的事件 ，你 无法预测会得到哪一个结果。
这里所说的结果可能是一副牌中的纸牌顺序， 或 者是掷骰子时的点数， 或者是一个
硬币哪一面朝上。

【PG】23.2　掷骰子
几乎所有人都玩过用到骰子的游戏， 可能是 Monopoly、Yahtzee、Trouble、
Backgammon 或者别的游戏。 不 论是哪个游戏， 掷骰子都是在游戏中生成随机事件的
最常用的方式之一。
骰子在程序中很容易模拟 ， Python的random模块提供了两种方法来完成这项
工作。一 种方法是使用 randint() 函数，它会选择一个随机的整数。 由于骰子各面
上的点数都是整数（1、2、3、4、5 和6） ，所以可以这样模拟掷骰子：

【PG】import random
die_1 = random.randint(1, 6)

那么就会得到 1到 6 的一个随机整数，每个整数出现的可能性相等。这和真正的骰子一样。
另一种完成相同工作的方法是先建立一个可能结果的列表，然后使用 choice() 函数从中选择一个。比如这样：import random
sides = [1, 2, 3, 4, 5, 6]
die_1 = random.choice(sides)
这与前一个例子的原理完全相同。 choice() 函数随机地从列表中选择一项。 在图灵社区会员 FreeLink 专享 尊重版权