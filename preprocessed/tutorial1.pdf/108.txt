【PG】第 8章　转圈圈

【PG】把这个程序保存为 Loop4.py，并运行（可以使用 Run（运行）Run Module（运行模块）菜单，或者按下快捷键 F5）。你会看到这样的结果：

It’s almost the same as the first one . . . except that it missed the last loop! Why?

The answer is that range(1, 5) gives us the list [1, 2, 3, 4]. You can try this in interactive mode: 

【PG】为什么没有 5呢？

嗯，这正是range()函数的做法。它会提供一个数字列表，从给定的第一个数开始，在给定的最后一个数之前结束。必须考虑到这一点，调整范围来得到想要的循环次数。 

【PG】如果你在 Python 3 中这样做，结果会有点不一样：

>>> print(range(1, 5))
range(1,5) 

这是因为在 Python 3 中range()函数不会提供一个数字列表，而是会提供一个“可迭代”（iterable）的东西，你可以使用循环来遍历它。（前文的“术语箱”中提到过的。）

如果在for循环中使用 range()，则其工作方式是完全一样的，只是内部机制略有不同而已。

【PG】代码清单 8-5给出了修改后的程序，它会给出 8的乘法表（从1到10）。

for looper in range(1, 11):
    print looper, "times 8 =", looper * 8

【PG】并在运行这段代码后，我们会得到以下输出结果：

>>>1 times 8 = 8
2 times 8 = 16
3 times 8 = 24
4 times 8 = 32
5 times 8 = 40
6 times 8 = 48
7 times 8 = 56
8 times 8 = 64
9 times 8 = 72
10 times 8 = 80

在程序清单 8-5中，range(1, 11)给出的是一个数字列表，包含从 1 到 10 的数字，循环按照该列表中的的顺序进行迭代。每次通过循环，变量looper都将获取列表中的下一个值。

【PG】顺便说一下，我们将循环变量称为looper，但你可以任意取一个你想要的名称。