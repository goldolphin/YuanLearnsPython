【PG】第 21章　打印格式化与字符串

【PG】Python会把值截断为上一个最大整数 ①。不过，这与int()函数（在第 4章见过）不同，因 为格式字符串不会像 int()那样创建一个新的值， 而只是改变值显示的方式。

【PG】刚刚我们用整数格式打印 12.67 ，结果 Python打印出了 12。不过变量 number的值并没有改变。可以检查一下：280 Hello World!

【PG】浮点数：%f或%F
【PG】打印小数时，可以在格式字符串中使用大写或小写的 f（%f或%F） ：

【PG】如果只使用 %f，数字会显示为有 6位小数。 如果在f前面加上.n，这里n可以是任意整数，就会把数字四舍五入为指定的小数位数：280 Hello World!

【PG】可以看到它把数字 12.3456四舍五入到小数点后前两位：12.35。

【PG】如果指定的小数位比数中实际的小数位还要多，Python 会用 0来填充（pad） ：

【PG】这个数的小数点后面只有 4位，但我们要求有 8位小数， 所以另外 4位会用 0来填充。

【PG】如果是负数 ，%f总会显示 -号。如果希望数字总会显示正负号 （即使它是一个正数），可以在%后面加一个 +号（如果列表中既有正数也有负数，这对于列表的对齐也很有好处） ：

【PG】如果希望包含正负数的列表对齐，但是不希望看到正数带 +号，可以在%后面使用空格代替 +：>>> print number

【PG】12.67
【PG】>>> number = 12.3456
【PG】>>> print '%f' % number12.345600
【PG】>>> print '%.2F' % number
【PG】12.35
【PG】>>> print '%.8f' % number
【PG】12.34560000
【PG】>>> print '%+f' % number
【PG】+12.345600
【PG】>>> number2 = -98.76
【PG】>>> print '% .2f' % number2
【PG】-98.76>>> print '% .2f' % number
【PG】12.35

【PG】数字的值并没有改变。我们只是使用格式字符串采用不同的方式打印。