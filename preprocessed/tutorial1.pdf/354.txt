【PG】第23章 碰运气——随机性

代码清单 23-3 给出了完成这个工作的代码。

【PG】代码清单 23-3 查找连续10次正面朝上

from random import *
coin = ["Heads", "Tails"]
heads_in_row = 0
ten_heads_in_row = 0
for i in range (1000000):
    if choice(coin) == "Heads":
        heads_in_row += 1
    else:
        heads_in_row = 0
    if heads_in_row == 10:
        ten_heads_in_row += 1
        heads_in_row = 0
print "We got 10 heads in a row", ten_heads_in_row, "times."

当我运行这个程序时，它的输出如下：

我运行了好几次这个程序，这个数总是在500左右。这说明，如果扔100万次硬币，连续10次正面朝上的情况大约出现500次，或者大约每扔2000次硬币就会得到连续10次正面朝上（1,000,000/500=2000）。

【PG】创建一副牌

另一种经常在游戏中使用的随机事件是抽牌。它是随机的，因为会洗牌，所以你不知道下一张是什么牌。每次洗牌时，顺序都不同。

对于掷骰子和扔硬币，我们说每次扔出都有相同的概率，因为硬币（或骰子）没有记忆。但对于纸牌就不同了。从一副牌中抽牌时，剩下的牌越来越少（大多数游戏中都是如此）。这会改变抽出剩余各张牌的概率。

例如，开始时是一整副牌，抽出红桃4的机会是1/52，或者大约2%。这是因为一副牌里有52张牌，而只有一张红桃4。如果继续抽牌（还没有抽到红桃4），整副牌只剩下一半时，得到红桃4的机会就是1/26，或者大约4%。剩下最后一张牌时，如果还没有抽到红桃4，说明抽出红桃4的机会就是1/1，或者100%。可以肯定下一个肯定会抽到红桃4，因为只剩下这一张牌了。

为什么要告诉你所有这些呢？我只是想说明：如果要建立一个利用一副纸牌实现的计算机游戏，就需要在整个过程中跟踪已经从这副牌中取走了哪些牌。要做到这一点有一个很好的方法，就是利用列表。开始时列表中包含一副牌中的所有52张牌。