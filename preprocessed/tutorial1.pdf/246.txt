【PG】220　第 17章　动画精灵和碰撞检测
会变化。此外，在不同的机器上，相同的代码运行的速度也不同。可能不是 15 ms，
代码时间可能变成 10 ms或20 ms。如果有一种更便于预测的方法来控制帧速率就好
了。好在，Pygame 的time模块为我们提供了这样的工具：一个名为 Clock的类。

【PG】用pygame.time.Clock() 控制帧速率并不是向每个循环增加一个延迟，pygame.
time.Clock() 会控制每个循环多长时间运行一次。这就像一个定时器在控制时间进程，
指出“现在开始下一个循环！现在开始下一个循环！……”

【PG】使用 Pygame时间钟之前，必须先创建 Clock对象的一个实例。这与创建其他类的实例完全相同：
clock = pygame.time.Clock()
然后在主循环体中，只需要告诉时钟多久“滴答”一次—也
就是说，循环应该多长时间运行一次：clock.tick(60)

【PG】传入clock.tick() 的数不是一个毫秒数。这是每秒内循环要运行的次数。所
以这个循环应当每秒运行60次。在这里我只是说“应当运行”，因为循环只能按计
算机能够保证的速度运行。每秒60个循环（或帧）时，每个循环需要 1000 / 60 = 
16.66 ms（大约17 ms）。如果循环中的代码运行时间超过17 ms，在 clock指出开始
下一次循环时当前循环将无法完成。

【PG】实际上，这说明对于图形运行的帧速率有一个限制。这个限制取决于图形的复
杂程度、窗口大小以及运行这个程序的计算机的速度。对于一个特定的程序，计算
机的运行速度可能是90 fps，而较早的一个较慢的计算机也许只能以10 fps的速度缓
慢运行。

【PG】对于非常复杂的图形，大多数现代计算机都完全可以按20～30 fps的速率运行
Pygame程序。所以如果希望你的游戏在大多数计算机上都能以相同的速度运行，可
以选择一个20～30 fps（或者更低）的帧速率。这已经很快了，足以生成看上去流
畅的运动。从现在开始，这本书中的例子都将使用 clock.tick(30)。

【PG】检查帧速率
如果想知道你的程序能以多快的速度运行，可以用一个名为 clock.get_fps() 的方法。