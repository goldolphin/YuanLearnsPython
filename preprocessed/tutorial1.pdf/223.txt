【PG】16.4 单个像素 197

【PG】再来连接多个点，还记得小时候玩过的连数字画图吗？这里给出一个 Pygame 版本。代码清单 16-9 中的程序使用了 draw.lines() 函数和一个点列表来创建图形。要想看到这个神秘的图片，必须键入代码清单 16-9 中的程序。这一次没有捷径可走！我们没有把这个程序包含在 \examples 文件夹中，如果你想看到这个神秘的图片，就必须自己键入。不过键入所有这些数字可能有点乏味，所以你可以在 \examples 文件夹或网站上的一个文本文件中找到这个 dots 列表。

【PG】代码清单 16-9 连连看神秘图片

import pygame, sys
pygame.init( )
dots = [[221, 432], [225, 331], [133, 342], [141, 310], [51, 230], [74, 217], [58, 153], [114, 164], [123, 135], [176, 190], [159, 77], [193, 93], [230, 28], [267, 93], [301, 77], [284, 190], [327, 135], [336, 164], [402, 153], [386, 217], [409, 230], [319, 310], [327, 342], [233, 331], [237, 432]]
screen = pygame.display.set_mode([640,480] )
screen.fill([255, 255, 255])
pygame.draw.lines(screen, [255,0,0],True, dots, 2) 
pygame.display.flip()
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT: 
            running = False
pygame.quit( )

【PG】这一次closed=True，逐点绘制。下面再来考虑逐点绘制。如果我们只想改变一个像素的颜色，画一个小圆或矩形就会有点傻。你可以不使用 draw 函数，而是利用 Surface.set_at() 方法访问一个表面上的单个像素。你要指出希望设置哪个像素，以及要设置成什么颜色：

screen.set_at([x, y], [0, 0, 0])

如果在我们的正弦曲线例子中使用这行代码（放在代码清单 16-7 的第 8 行），看上去与使用 1 个像素宽的矩形画出的结果完全相同。还可以用 Surface.get_at() 方法检查一个像素设置为什么颜色。只需要传入像素的坐标即可。